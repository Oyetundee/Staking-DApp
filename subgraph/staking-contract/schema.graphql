# @entity(immutable: true) means the record never changes after creation
# @entity(immutable: false) means the record can be updated

# Stores data when a user does an emergency withdrawal
type EmergencyWithdrawn @entity(immutable: true) {
  id: Bytes!                    # unique identifier
  user: Bytes!                  # wallet address
  amount: BigInt!               # tokens withdrawn
  penalty: BigInt!              # penalty fee paid
  timestamp: BigInt!            # contract timestamp
  newTotalStaked: BigInt!       # protocol total after withdrawal
  blockNumber: BigInt!          # ethereum block number
  blockTimestamp: BigInt!       # block timestamp
  transactionHash: Bytes!       # transaction hash
}

# Stores data when a user claims their rewards
type RewardsClaimed @entity(immutable: true) {
  id: Bytes!                    # unique identifier
  user: Bytes!                  # wallet address
  amount: BigInt!               # reward tokens claimed
  timestamp: BigInt!            # contract timestamp
  newPendingRewards: BigInt!    # remaining unclaimed rewards
  totalStaked: BigInt!          # protocol total at claim time
  blockNumber: BigInt!          # ethereum block number
  blockTimestamp: BigInt!       # block timestamp
  transactionHash: Bytes!       # transaction hash
}

# Stores data when a user stakes tokens
type Staked @entity(immutable: true) {
  id: Bytes!                    # unique identifier
  user: Bytes!                  # wallet address
  amount: BigInt!               # tokens staked
  timestamp: BigInt!            # contract timestamp
  newTotalStaked: BigInt!       # protocol total after stake
  currentRewardRate: BigInt!    # reward rate at stake time
  blockNumber: BigInt!          # ethereum block number
  blockTimestamp: BigInt!       # block timestamp
  transactionHash: Bytes!       # transaction hash
}

# Stores data when a user withdraws tokens
type Withdrawn @entity(immutable: true) {
  id: Bytes!                    # unique identifier
  user: Bytes!                  # wallet address
  amount: BigInt!               # tokens withdrawn
  timestamp: BigInt!            # contract timestamp
  newTotalStaked: BigInt!       # protocol total after withdrawal
  currentRewardRate: BigInt!    # reward rate at withdrawal time
  rewardsAccrued: BigInt!       # rewards earned during staking period
  blockNumber: BigInt!          # ethereum block number
  blockTimestamp: BigInt!       # block timestamp
  transactionHash: Bytes!       # transaction hash
}

# Stores lifetime statistics for each user 
type UserStats @entity(immutable: false) {
  id: ID!                           # wallet address (for database) #like a record name or number
  user: Bytes!                      # wallet address (for data)
  totalStaked: BigInt!              # all tokens ever staked
  totalWithdrawn: BigInt!           # all tokens ever withdrawn
  totalRewardsClaimed: BigInt!      # all reward tokens claimed
  totalEmergencyWithdrawn: BigInt!  # all emergency withdrawals
  totalPenaltiesPaid: BigInt!       # all penalties paid
  currentStakedAmount: BigInt!      # tokens currently staked
  firstStakeTimestamp: BigInt!      # when user first staked
  lastActivityTimestamp: BigInt!    # last stake/withdraw/claim time
}

# Stores overall protocol statistics 
type ProtocolStats @entity(immutable: false) {
  id: ID!                           # always "protocol"  #like a record name or number
  totalStaked: BigInt!              # all tokens ever staked by everyone
  totalWithdrawn: BigInt!           # all tokens ever withdrawn
  totalRewardsPaid: BigInt!         # all rewards ever paid out
  totalEmergencyWithdrawn: BigInt!  # all emergency withdrawals
  totalPenaltiesCollected: BigInt!  # all penalties collected
  currentTotalStaked: BigInt!       # tokens currently locked in protocol
  uniqueStakers: BigInt!            # number of unique wallet addresses
  currentRewardRate: BigInt!        # current reward rate
  lastUpdatedTimestamp: BigInt!     # last time stats were updated
}

